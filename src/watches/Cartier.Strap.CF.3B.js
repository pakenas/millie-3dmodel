/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF, useTexture, Html } from '@react-three/drei'
import { useLoader } from '@react-three/fiber';
import { TextureLoader } from 'three/src/loaders/TextureLoader';
import { MeshStandardMaterial, RepeatWrapping} from 'three';

export default function CartierCF({bandColor, backColor, screwColor, ...props}) {
  
  const { nodes, materials } = useGLTF('/v2/Cartier.Strap.CF.3B/Watches_FBX_Export.gltf')

  const bandBase = useLoader(TextureLoader, '/v2/Cartier.Strap.CF.3B/textures/straps/'+bandColor+'/Strap_BaseColor.jpg')
    bandBase.wrapS = RepeatWrapping
    bandBase.wrapT = RepeatWrapping;
    bandBase.flipY = false;
    bandBase.mapping = RepeatWrapping;

  const bandDisplacement = useLoader(TextureLoader, '/v2/Cartier.Strap.CF.3B/textures/straps/'+bandColor+'/Strap_Displacement.jpg')
  const bandNormal = useLoader(TextureLoader, '/v2/Cartier.Strap.CF.3B/textures/straps/'+bandColor+'/Strap_Normal.jpg')
  const bandMetalness = useLoader(TextureLoader, '/v2/Cartier.Strap.CF.3B/textures/straps/'+bandColor+'/Strap_Metallic.jpg')
  const bandRoughness = useLoader(TextureLoader, '/v2/Cartier.Strap.CF.3B/textures/straps/'+bandColor+'/Strap_Roughness.jpg')

  //BackPlate
  const backBase = useLoader(TextureLoader, '/v2/textures/backplate/'+backColor+'/Face_Back_BaseColor.jpg')
  backBase.wrapS = RepeatWrapping
  backBase.wrapT = RepeatWrapping;
  backBase.repeat.set(1,1);
  backBase.flipY = false;
  backBase.mapping = RepeatWrapping;

  const backDisplacement = useLoader(TextureLoader, '/v2/textures/backplate/'+backColor+'/Face_Back_Displacement.jpg')
  const backNormal = useLoader(TextureLoader, '/v2/textures/backplate/'+backColor+'/Face_Back_Normal.jpg')
  const backMetalness = useLoader(TextureLoader, '/v2/textures/backplate/'+backColor+'/Face_Back_Metallic.jpg')
  const backRoughness = useLoader(TextureLoader, '/v2/textures/backplate/'+backColor+'/Face_Back_Roughness.jpg')

  //Screws
  const screwBase = useLoader(TextureLoader, '/v2/textures/screws/'+screwColor+'/Face_Screws_BaseColor.jpg')
  screwBase.wrapS = RepeatWrapping
  screwBase.wrapT = RepeatWrapping;
  screwBase.repeat.set(1,1);
  screwBase.flipY = false;
  screwBase.mapping = RepeatWrapping;

  const screwDisplacement = useLoader(TextureLoader, '/v2/textures/screws/'+screwColor+'/Face_Screws_Displacement.jpg')
  const screwNormal = useLoader(TextureLoader, '/v2/textures/screws/'+screwColor+'/Face_Screws_Normal.jpg')
  const screwMetalness = useLoader(TextureLoader, '/v2/textures/screws/'+screwColor+'/Face_Screws_Metallic.jpg')
  const screwRoughness = useLoader(TextureLoader, '/v2/textures/screws/'+screwColor+'/Face_Screws_Roughness.jpg')

  return (
    <group {...props} dispose={null}>
      <group position={[0.0, 0.0, 0.0]}>

        <mesh geometry={nodes.Plane015.geometry}

        material={
          new MeshStandardMaterial({
            map: bandBase,
            displacementMap: bandDisplacement,
            normalMap: bandNormal,
            roughnessMap: bandRoughness,
            metalnessMap: bandMetalness,
            metalness: true,
            roughness: true,
            displacementScale: 0
          })
        } 
        onPointerOver={(e) => console.log("hovered")}
        >                  
          </mesh>


        <mesh geometry={nodes.Plane015_1.geometry} material={materials['Face_Middle.Bronze']} />
        <mesh geometry={nodes.Plane015_2.geometry} material={materials['Display.006']} />
        <mesh geometry={nodes.Plane015_3.geometry} material={materials.Front_Titanium_Viper} />

        <mesh geometry={nodes.Plane015_4.geometry}
         material={
          new MeshStandardMaterial({
            map: backBase,
            displacementMap: backDisplacement,
            normalMap: backNormal,
            roughnessMap: backRoughness,
            metalnessMap: backMetalness,
            metalness: true,
            roughness: true,
            displacementScale: 0
          })
        }
>
        </mesh>
        <mesh geometry={nodes.Plane015_5.geometry} material={
          new MeshStandardMaterial({
            map: screwBase,
            displacementMap: screwDisplacement,
            normalMap: screwNormal,
            roughnessMap: screwRoughness,
            metalnessMap: screwMetalness,
            metalness: true,
            roughness: true,
            displacementScale: 0
          })
        } />
      </group>
    </group>
  )
}

useGLTF.preload('/v2/Cartier.Strap.CF.3B/Watches_FBX_Export.gltf')
